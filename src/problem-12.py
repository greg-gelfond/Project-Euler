"""
The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

          1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""

from math import sqrt


def nth_triangle_number(n: int) -> int:
    """
    Returns the nth triangle number.
    """
    return n * (n + 1) // 2


def bounded_primes(n: int) -> list[int]:
    """
    Returns a list of primes less than or equal to n using the Sieve of
    Eratosthenes.
    """
    # initialize the sieve
    primes = [True] * (n + 1)
    primes[0] = primes[1] = False

    for i in range(int(sqrt(n)) + 1):
        if primes[i]:
            for j in range(i**2, n + 1, i):
                primes[j] = False

    return [i for i, prime in enumerate(primes) if prime]


def prime_factorization(n: int, primes: list[int]) -> list[int]:
    """
    Given a positive integer n, and a list of primes less than or equal to n,
    returns the prime factorization of n as a list.
    """
    factors = []

    for term in primes:
        while n % term == 0:
            factors.append(term)
            n //= term

    return factors


def divisors(n: int, primes: list[int]) -> list[int]:
    """
    Given a positive integer n, and a list of primes less than or equal to n,
    returns a list of the divisors of n.
    """
    terms = [1]

    for factor in prime_factorization(n, primes):
        expansions = []
        for div in terms:
            if factor * div not in terms:
                expansions.append(factor * div)
        terms = terms + expansions

    return terms


def solution() -> int:
    """
    Return the value of the first triangle number to have over five hundred
    divisors.
    """
    primes = bounded_primes(100)

    i, term = 1, nth_triangle_number(1)
    while len(divisors(term, primes)) <= 500:
        i += 1
        term = nth_triangle_number(i)

    return term


if __name__ == "__main__":
    print(solution())
