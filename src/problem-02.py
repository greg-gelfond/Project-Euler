"""
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.
"""

from typing import Generator


def fibonacci(x: int = 1, y: int = 1, bound: int = 100) -> Generator[int, None, None]:
    """
    Returns a generator corresponding to those elements of the Fibonacci
    sequence which are less than bound, and obtained starting with x and y.
    """
    while x < bound:
        yield x
        x, y = y, x + y


def solution() -> int:
    """
    Returns the sum of the even-valued terms of the Fibonacci sequence which do
    not exceed four million.
    """
    return sum([x for x in fibonacci(1, 2, 4000000) if x % 2 == 0])


if __name__ == "__main__":
    print(solution())
